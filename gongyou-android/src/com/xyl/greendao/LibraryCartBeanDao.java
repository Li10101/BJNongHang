package com.xyl.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LIBRARY_CART_BEAN".
*/
public class LibraryCartBeanDao extends AbstractDao<LibraryCartBean, Long> {

    public static final String TABLENAME = "LIBRARY_CART_BEAN";

    /**
     * Properties of entity LibraryCartBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ProductId = new Property(2, int.class, "productId", false, "PRODUCT_ID");
        public final static Property SaleCount = new Property(3, double.class, "saleCount", false, "SALE_COUNT");
        public final static Property Price = new Property(4, double.class, "price", false, "PRICE");
        public final static Property ProductType = new Property(5, String.class, "productType", false, "PRODUCT_TYPE");
        public final static Property BusinessId = new Property(6, int.class, "businessId", false, "BUSINESS_ID");
        public final static Property IsSelected = new Property(7, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property ImageUrl = new Property(8, String.class, "imageUrl", false, "IMAGE_URL");
    }


    public LibraryCartBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LibraryCartBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIBRARY_CART_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 2: productId
                "\"SALE_COUNT\" REAL NOT NULL ," + // 3: saleCount
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"PRODUCT_TYPE\" TEXT," + // 5: productType
                "\"BUSINESS_ID\" INTEGER NOT NULL ," + // 6: businessId
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 7: isSelected
                "\"IMAGE_URL\" TEXT);"); // 8: imageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIBRARY_CART_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LibraryCartBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getProductId());
        stmt.bindDouble(4, entity.getSaleCount());
        stmt.bindDouble(5, entity.getPrice());
 
        String productType = entity.getProductType();
        if (productType != null) {
            stmt.bindString(6, productType);
        }
        stmt.bindLong(7, entity.getBusinessId());
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(9, imageUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LibraryCartBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getProductId());
        stmt.bindDouble(4, entity.getSaleCount());
        stmt.bindDouble(5, entity.getPrice());
 
        String productType = entity.getProductType();
        if (productType != null) {
            stmt.bindString(6, productType);
        }
        stmt.bindLong(7, entity.getBusinessId());
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(9, imageUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LibraryCartBean readEntity(Cursor cursor, int offset) {
        LibraryCartBean entity = new LibraryCartBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // productId
            cursor.getDouble(offset + 3), // saleCount
            cursor.getDouble(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // productType
            cursor.getInt(offset + 6), // businessId
            cursor.getShort(offset + 7) != 0, // isSelected
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // imageUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LibraryCartBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductId(cursor.getInt(offset + 2));
        entity.setSaleCount(cursor.getDouble(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
        entity.setProductType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBusinessId(cursor.getInt(offset + 6));
        entity.setIsSelected(cursor.getShort(offset + 7) != 0);
        entity.setImageUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LibraryCartBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LibraryCartBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LibraryCartBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
