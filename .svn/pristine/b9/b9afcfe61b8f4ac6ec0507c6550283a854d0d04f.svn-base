package com.warehouse.fragment.inventoryfragment;

import android.content.Intent;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.animation.Animation;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ListView;
import com.andview.refreshview.XRefreshView;
import com.warehouse.R;
import com.warehouse.activity.OrderActivity;
import com.warehouse.adapter.ReviewFragmentAdapter;
import com.warehouse.base.BaseFragment;
import com.warehouse.bean.LoginBean;
import com.warehouse.bean.MessageBean;
import com.warehouse.bean.PurchaseBean;
import com.warehouse.net.BaseNet;
import com.warehouse.net.NetContacts;
import com.warehouse.net.OrderManager;

import java.util.ArrayList;
import java.util.List;


/*****************************************************
 * author:      wz
 * email:       wangzhong0116@foxmail.com
 * version:     1.0
 * date:        2017/1/10 11:56
 * description:
 *****************************************************/

public class ReviewFragment extends BaseFragment {

    private ListView lv_purchase;
    private PurchaseBean purchaseBean;
    private List<PurchaseBean.RecordsBean> recordsBeen;
    private LoginBean loginBean;
    private int type;
    private XRefreshView xRefreshView;
    private boolean isGetData = false;
    private int lv_position;
    private int pos;

    @Override
    public View initView() {
        View view = View.inflate(mContext,R.layout.review_view,null);
        lv_purchase = view.findViewById(R.id.lv_purchase);
        xRefreshView = view.findViewById(R.id.xrefreshview);
        //设置刷新完成以后，headerview固定的时间
        xRefreshView.setPinnedTime(1000);
        xRefreshView.setMoveForHorizontal(true);
        xRefreshView.setPullLoadEnable(true);
        xRefreshView.setAutoLoadMore(false);
        xRefreshView.enableReleaseToLoadMore(true);
        xRefreshView.enableRecyclerViewPullUp(true);
        xRefreshView.enablePullUpWhenLoadCompleted(true);
        recordsBeen = new ArrayList<>();
        initListener();
        return view;
    }

    private void initListener() {
        xRefreshView.setXRefreshViewListener(new XRefreshView.SimpleXRefreshListener(){
            @Override
            public void onRefresh(boolean isPullDown) {
                super.onRefresh(isPullDown);
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        NetContacts.getInstance().pageIndex = 1;
                        getPurchaseData();
                        xRefreshView.stopRefresh();
                    }
                }, 500);
            }

            @Override
            public void onLoadMore(boolean isSilence) {
                super.onLoadMore(isSilence);
                new Handler().postDelayed(new Runnable() {
                    public void run() {
                        NetContacts.getInstance().pageIndex++;
                        getPurchaseData();
                        xRefreshView.stopLoadMore();
                    }
                }, 1000);
            }
        });
        xRefreshView.setOnAbsListViewScrollListener(new AbsListView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(AbsListView absListView, int scrollState) {
                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE){
                    lv_position = lv_purchase.getFirstVisiblePosition();
                    View item=lv_purchase.getChildAt(0);
                    pos = (item == null) ? 0 :item.getTop();
                }
            }

            @Override
            public void onScroll(AbsListView absListView, int i, int i1, int i2) {

            }
        });
        lv_purchase.setOnScrollListener(new AbsListView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(AbsListView absListView, int scrollState) {
                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE){
                    lv_position = lv_purchase.getFirstVisiblePosition();
                    View item=lv_purchase.getChildAt(0);
                    pos = (item == null) ? 0 :item.getTop();
                }
            }

            @Override
            public void onScroll(AbsListView absListView, int i, int i1, int i2) {

            }
        });
    }

    @Override
    public void initData() {
        super.initData();
        getPurchaseData();
        lv_purchase.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                PurchaseBean.RecordsBean recordsBean = purchaseBean.getRecords().get(i);
                Intent intent = new Intent(mContext, OrderActivity.class);
                intent.putExtra("PurchaseBean",recordsBean);
                intent.putExtra("LoginBean",loginBean);
                intent.putExtra("LoginBean",loginBean);
                intent.putExtra("type",type);
                startActivity(intent);
            }
        });
    }

    private void getPurchaseData() {
        new OrderManager().findStorageData(type+"", new BaseNet.BaseCallback<PurchaseBean>() {
            @Override
            public void messageSuccess(PurchaseBean bean) {
               /* int pageIndex = NetContacts.getInstance().pageIndex;
                Log.e("",pageIndex+"");*/
                purchaseBean = bean;
                //recordsBeen.addAll(bean.getRecords());
                ReviewFragmentAdapter reviewFragmentAdapter = new ReviewFragmentAdapter(mContext,purchaseBean);
                lv_purchase.setAdapter(reviewFragmentAdapter);
                lv_purchase.setSelectionFromTop(lv_position,pos);
            }

            @Override
            public void messageFailure(MessageBean backError) {

            }

            @Override
            public void connectFailure(MessageBean messageBean) {

            }
        });
    }

    @Override
    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
       if (enter&&isGetData){
           isGetData = true;
           getPurchaseData();
       }else{
           isGetData = false;
       }
        return super.onCreateAnimation(transit, enter, nextAnim);
    }

    @Override
    public void onResume() {
        super.onResume();
        if (!isGetData){
            getPurchaseData();
            isGetData = true;
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        isGetData = false;
    }

    public void setLoginData(LoginBean loginBean, int i) {
        this.loginBean = loginBean;
        this.type = i;
    }
}
