package com.xyl.domain;

import android.graphics.Bitmap;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.List;

public class DataBean implements Serializable {
	
	public String requestTime;
	public String evaluateRateDisplay;
	public String fixStaffCode;
	public String customerPhone;
	public String type;
	public String fixStaffPhone;
	public int pushTag;
	public Double fixMoney;
	public String priority;
	public String description;
	public String customerCode; 
	public String signatureUrl;
	public String repairCaseCode;
	public String customerName;
	public String evaluateContent;
	public String status;
	public String typeDisplay;
	public String priorityDisplay;
	public String statusDisplay;
	public String fixStaffName;
	public String address;
	public String expectedFixTime;
	public String evaluateRate;
	public String caseMoneyType;
	public String caseProfession;
	public String caseArea;
	public String contentAndNote;
	public Bitmap bitmap;
	public String forwarReason;
	public String rejectReason;
	public String equipmentPmType;
	public String lastMaintainDate;
	public String nextMaintainDate;
	public String maintenanceSop;
	public int period;
    public String building;

	public List<Pictures> getPictures() {
		return pictures;
	}

	public void setPictures(List<Pictures> pictures) {
		this.pictures = pictures;
	}

	public List<Pictures> pictures;
	public class Pictures implements Serializable {
		public int pictureId;
		public String pictureUrl; 
		public String description;
		public String typeDisplay;
		public String uploader;
		public String uploadTime;
		public String type;
		@Override
		public String toString() {
			String s = "";
			Field[] arr = this.getClass().getFields();
			for (Field f : getClass().getFields()) {
				try {
					s += f.getName() + "=" + f.get(this) + "\n,";
				} catch (Exception e) {
				}
			}
			return getClass().getSimpleName() + "["
					+ (arr.length == 0 ? s : s.substring(0, s.length() - 1))
					+ "]";
		}
	}

	public Equipment equipment;
	public class Equipment implements Serializable {

		public Boolean warn;
		public String location;
		public String fixStaffCode;
		public String vendorAddress;
		public String overhaulCycle;
		public String modelNo;
		public String maintenanceSop;
		public String releaseDate;
		public String description;
		public String technicalParameters;
		public String categoryName;
		public String name;
		public String repairCaseCode;
		public String icon; // null
		public String forwardMaintenanceDate;
		public String vendorName;
		public String image;
		public String useDate;
		public String fixStaffName;
		public String vendorPhone;
		public String vendorContact;
		public String nextMaintenanceDate;
		public String serialNo;
		public String category;
		public String iomFile;
		public String equipmentNo;
		public String manufacturer;
		public String specification;
		public String serviceArea;
		public List<MaintainRecords> maintainRecords;

		public class MaintainRecords implements Serializable{

			public String fixStaffName;
			public String maintainDate;
			public String description;

			@Override
			public String toString() {
				String s = "";
				Field[] arr = this.getClass().getFields();
				for (Field f : getClass().getFields()) {
					try {
						s += f.getName() + "=" + f.get(this) + "\n,";
					} catch (Exception e) {
					}
				}
				return getClass().getSimpleName()
						+ "["
						+ (arr.length == 0 ? s : s.substring(0, s.length() - 1))
						+ "]";
			}
		}

	}

	
	

	public List<Traces> traces;

	public class Traces implements Serializable {

		public String staffCode;
		public String actionDisplay;
		public String status;
		public String staffName;
		public String statusDisplay;
		public String action;
		public String caseTraceId;
		public String executeTime;

		@Override
		public String toString() {
			String s = "";
			Field[] arr = this.getClass().getFields();
			for (Field f : getClass().getFields()) {
				try {
					s += f.getName() + "=" + f.get(this) + "\n,";
				} catch (Exception e) {
				}
			}
			return getClass().getSimpleName() + "["
					+ (arr.length == 0 ? s : s.substring(0, s.length() - 1))
					+ "]";
		}
	}

	

	public List<Partners> partners;

	public class Partners implements Serializable {

		public String staffCode;
		public String name;

		@Override
		public String toString() {
			String s = "";
			Field[] arr = this.getClass().getFields();
			for (Field f : getClass().getFields()) {
				try {
					s += f.getName() + "=" + f.get(this) + "\n,";
				} catch (Exception e) {
				}
			}
			return getClass().getSimpleName() + "["
					+ (arr.length == 0 ? s : s.substring(0, s.length() - 1))
					+ "]";
		}
	}

	public List<ServicePictures> servicePictures;

	public class ServicePictures implements Serializable {

		public String pictureUrl;
		public String typeDisplay;
		public String uploader;
		public String uploadTime;
		public String type;

		@Override
		public String toString() {
			String s = "";
			Field[] arr = this.getClass().getFields();
			for (Field f : getClass().getFields()) {
				try {
					s += f.getName() + "=" + f.get(this) + "\n,";
				} catch (Exception e) {
				}
			}
			return getClass().getSimpleName() + "["
					+ (arr.length == 0 ? s : s.substring(0, s.length() - 1))
					+ "]";
		}
	}

	@Override
	public String toString() {
		String s = "";
		Field[] arr = this.getClass().getFields();
		for (Field f : getClass().getFields()) {
			try {
				s += f.getName() + "=" + f.get(this) + "\n,";
			} catch (Exception e) {
			}
		}
		return getClass().getSimpleName() + "["
				+ (arr.length == 0 ? s : s.substring(0, s.length() - 1)) + "]";
	}
}