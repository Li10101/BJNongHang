package com.xyl.net;

import java.io.File;

import com.xyl.base.BaseNet;
import com.xyl.domain.CasesBean;
import com.xyl.domain.DataBean;
import com.xyl.domain.FindByAssetNoBean;
import com.xyl.domain.MessageBean;
import com.xyl.domain.UpDataApkBean;
import com.xyl.global.NetContacts;
import com.lidroid.xutils.http.RequestParams;


public class OrderManager extends BaseNet{
	/**
	 * 查询新生成的工单
	 * 在网页上是不需要参数但是要jessionid
	 * 这里明确了泛型的类型
	 */
	public void createdCases(BaseCallback<CasesBean> baseCallback){
	
		baseMethod( NetContacts.getInstance().CREATEDCASES, baseCallback,CasesBean.class);
	}
	
	/**
	 * 查询派发给组的工单
	 * @param baseCallback
	 */
	public void assginGroupCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().ASSGINGROUPCASES, baseCallback, CasesBean.class);
	}
	
	/**
	 * 查询派发给工人的工单
	 * @param baseCallback
	 */
	public void assginStaffCases(BaseCallback<CasesBean> baseCallback){
		String s = NetContacts.getInstance().ASSGINSTAFFCASES;
		baseMethod(s, baseCallback, CasesBean.class);
	}
	
	/**
	 * 查询已接受的工单
	 * @param baseCallback
	 */
	public void acceptCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().ACCEPTCASES, baseCallback, CasesBean.class);
	}
	/**
	 *  查询已拒绝的工单
	 * @param baseCallback
	 */
	public void rejectCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().REJECTCASES, baseCallback, CasesBean.class);
	}
	/**
	 * 查询已维修的工单
	 * @param baseCallback
	 */
	public void fixedCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().FIXEDCASES, baseCallback, CasesBean.class);
	}
	/**
	 * 查询所有的工单
	 * @param baseCallback
	 */
	public void cases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().CASES, baseCallback,CasesBean.class);
	}
	/**
	 * 查询我的工单
	 * @param baseCallback
	 */
	public void myCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().MYCASES, baseCallback, CasesBean.class);
	}
	/**
	 * 查询组的工单
	 */
	public void teamCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().TEAMCASES, baseCallback, CasesBean.class);
	}
	
	//TODO:11 完成bean 
	/**
	 * 这是给焦玉斌的方法
	 * @param code
	 * @param baseCallback
	 */
	public void data(String code,BaseCallback<DataBean> baseCallback){
		RequestParams params = new RequestParams();
		params.addBodyParameter("code", code);
		baseMethod(params,NetContacts.getInstance().DATA, baseCallback, DataBean.class);
	}
	
	/**
	 * 上传现场图片
	 * @param callback
	 * @param caseCode
	 * @param description
	 * @param picture
	 */
	public void uploadArrivePicture(EntityCallback callback ,String caseCode ,String description,File picture ){
		RequestParams params = new RequestParams();
		params.addBodyParameter("caseCode", caseCode);
		params.addBodyParameter("description", description);
		params.addBodyParameter("picture", picture, "image/png"); 
		entity(params, NetContacts.getInstance().UPLOADARRIVEPICTURE, callback);
	}

	public void uploadArriveCase(EntityCallback callback ,String caseCode ,String description ){
		RequestParams params = new RequestParams();
		params.addBodyParameter("caseCode", caseCode);
		params.addBodyParameter("description", description);
		entity(params, NetContacts.getInstance().UPLOADARRIVE,callback);
	}
	
	public void uploadArrive(EntityCallback callback ,String equipmentNo,String fixStaffCode,String  description){
		RequestParams params = new RequestParams();
		params.addBodyParameter("equipmentNo", equipmentNo);
		params.addBodyParameter("fixStaffCode", fixStaffCode);
		params.addBodyParameter("description", description); 
		entity(params, NetContacts.getInstance().MANTIONEQUIPMENTNO, callback);
	}
	//创建客户工单并派发给工人
	/**
	 * 
	 * @param baseCallback    回掉方法
	 * @param serviceRequestId 服务请求编号
	 * @param staffCode	维修组
	 * @param priority	优先级(0低、1中、2高)
	 */
	public void createCustomerAndAssignStaff(BaseCallback<MessageBean> baseCallback,String serviceRequestId ,String staffCode ,String priority ){
		RequestParams params = new RequestParams();
		params.addBodyParameter("serviceRequestId", serviceRequestId);
		params.addBodyParameter("staffCode", staffCode);
		params.addBodyParameter("priority", priority);
		baseMethod(params, NetContacts.getInstance().CREATECUSTOMERANDASSIGNSTAFF, baseCallback, MessageBean.class);
	}
	
	//创建设备工单并派发给工人
	/**
	 * 创建设备工单并派发给工人
	 * @param baseCallback
	 * @param equipmentNo	设备编号
	 * @param staffCode	维修员工
	 * @param expectedFixTime	期望完成时间
	 * @param priority	 优先级(0低、1中、2高)
	 * @param description	 描述
	 */
    public  void createEquipmentAndAssignStaff(BaseCallback<MessageBean> baseCallback,String equipmentNo,String staffCode,String expectedFixTime ,String priority,String description){ 
    	RequestParams params = new RequestParams();
		params.addBodyParameter("equipmentNo", equipmentNo);
		params.addBodyParameter("staffCode", staffCode);
		params.addBodyParameter("expectedFixTime", expectedFixTime);
		params.addBodyParameter("priority", priority);
		params.addBodyParameter("description", description);
		baseMethod(params, NetContacts.getInstance().CREATECUSTOMERANDASSIGNSTAFF, baseCallback, MessageBean.class);
    }
	
    /**
     *  创建设备工单并派发给组
     *  参数同上
     * @param baseCallback
     * @param equipmentNo
     * @param teamId	 维修组
     * @param expectedFixTime
     * @param priority
     * @param description
     */
    public void createEquipmentAndAssignGroup(BaseCallback<MessageBean> baseCallback,String equipmentNo,String teamId,String expectedFixTime ,String priority,String description){ 
    	RequestParams params = new RequestParams();
		params.addBodyParameter("equipmentNo", equipmentNo);
		params.addBodyParameter("teamId", teamId);
		params.addBodyParameter("expectedFixTime", expectedFixTime);
		params.addBodyParameter("priority", priority);
		params.addBodyParameter("description", description);
		baseMethod(params, NetContacts.getInstance().CREATECUSTOMERANDASSIGNSTAFF, baseCallback, MessageBean.class);
    }
    
    
    /**
     * 添加，删除工单伙伴
     * @param caseCode	工单编号
     * @param staffCode 工单伙伴员工编号
     */
    public void basePartner(String url,EntityCallback callback,String caseCode,String staffCode){
    	RequestParams params = new RequestParams();
		params.addBodyParameter("caseCode", caseCode);
		params.addBodyParameter("staffCode", staffCode);
		entity(params, url, callback);
    }
    /**
     * 添加工单伙伴
     */
    public void addPartner(EntityCallback callback,String caseCode,String staffCode){
    	basePartner(NetContacts.getInstance().ADDPARTNER, callback, caseCode, staffCode);
    }
    /**
     * 删除工单伙伴
     * @param callback
     * @param caseCode
     * @param staffCode
     */
    public void deletePartner(EntityCallback callback,String caseCode,String staffCode){
    	basePartner(NetContacts.getInstance().DELETEPARTNER, callback, caseCode, staffCode);
    }
    @Deprecated
    /**给的新接口方法有问题
     * 1.查询已抢单的工单	OrderStream 中已有 此方法	返回值不同  貌似有问题
     * 给的新接口方法有问题
     * @param baseCallback
     */
    public void vie(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().VIE, baseCallback, CasesBean.class);
	}

    @Deprecated
    /**
     * 给的新接口方法有问题
     * 2.查询已评价的工单	OrderStream 中已有 此方法
     * @param evaluateRate		客户评价等级
     * @param evaluateContent	客户评价内容
     * @param baseCallback
     */
    public void evaluate(String evaluateRate,String evaluateContent,BaseCallback<CasesBean> baseCallback){
    	RequestParams params = new RequestParams();
    	params.addBodyParameter("evaluateRate", evaluateRate);
    	params.addBodyParameter("evaluateContent", evaluateContent);
		baseMethod(params,NetContacts.getInstance().EVALUATE, baseCallback, CasesBean.class);
	}
    /**
     * t3查看已评价工单
     * @param baseCallback
     */
    public void assessedCases(BaseCallback<CasesBean> baseCallback){
  		baseMethod(NetContacts.getInstance().ASSESSEDCASES, baseCallback, CasesBean.class);
  	}
    
    public void servicesWork(BaseCallback<CasesBean> baseCallback){
   		baseMethod(NetContacts.getInstance().SERVICESWORKER, baseCallback, CasesBean.class);
   	}

	/**
	 * 组长查看已派发的工单		能行
	 * @param baseCallback
	 */
	public void AssignCasesServiceGourp(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().SERVICEASSIGNCASESSERVICEGOURP, baseCallback, CasesBean.class);
	}
   
    /**
     * 5.经理查看已派发的工单		能行
     * @param baseCallback
     */
    public void assignCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().ASSIGNCASES, baseCallback, CasesBean.class);
	}
    /**	能行
     * 6.客服查看已派发的工单(包含已派发、已接受、已拒绝)
     * @param baseCallback
     */
    public void serviceAssessedCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().SERVICEASSESSEDCASES, baseCallback, CasesBean.class);
	}
	/**
	 * 组长/客服/物业经理查看昨日遗留工单Remnant
	 */
	public void RemnantCases(BaseCallback<CasesBean> baseCallback){
		baseMethod(NetContacts.getInstance().REMNANTCASEDATA, baseCallback, CasesBean.class);
	}

	/**
	 * 查询工单信息
	 */
	public void Search(String state,BaseCallback<CasesBean> baseCallback){
		RequestParams params = new RequestParams();
		params.addBodyParameter("data", state);
		baseMethod(params,NetContacts.getInstance().SEARCH, baseCallback, CasesBean.class);
	}



    /** 状态(created新建、assign-group派给组、assign-staff派给工人、vied已抢单、accepted已接受、rejected已拒绝、arrived已到达、fixed已维修、done已完成、closed已关闭) (Not Null) */
//	@Column(name = "STATUS")
//	private String status;

    public void statusCases(String status,BaseCallback<CasesBean> baseCallback){
    	RequestParams params = new RequestParams();
    	params.addBodyParameter("status", status);
    	baseMethod(params,NetContacts.getInstance().CASES, baseCallback, CasesBean.class);
    }

	/**
	 * 更新APK
	 * @param baseCallback
	 */
	public void upDataApk(BaseCallback<UpDataApkBean> baseCallback){

		baseMethod(NetContacts.getInstance().GETVERSION, baseCallback, UpDataApkBean.class);
	}

	/**
	 * 获取资产管理的数据
	 */

	public void getZiChanData(String status , BaseCallback<FindByAssetNoBean> baseCallback){
		RequestParams params = new RequestParams();
		params.addBodyParameter("status", status);
		baseMethod(params,NetContacts.getInstance().USERICHART, baseCallback, FindByAssetNoBean.class);
	}


}
