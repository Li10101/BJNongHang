package com.warehouse.activity;
import android.app.Activity;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.warehouse.R;
import com.warehouse.adapter.ShoppingCartAdapter;
import com.warehouse.greendao.Cart;
import com.warehouse.greendao.TreasuryCartBean;
import com.warehouse.net.BaseNet;
import com.warehouse.net.OrderManager;
import com.warehouse.utils.GreendaoHelper;
import com.warehouse.utils.ToastUtil;

import java.util.ArrayList;
import java.util.List;


/**
 * Created by li on 2017/1/4.
 */
public class ShoppingCartActivity extends Activity implements View.OnClickListener {
    private static final String TAG = ShoppingCartActivity.class.getSimpleName();
    private TextView tvEdit;
    private RecyclerView rvShoppCart;
    private LinearLayout llCheckAll;
    private LinearLayout ll_goShopping;
    private CheckBox checkboxAll;
    private TextView tvShopcartTotal;
    private Button btnCheckOut;
    private LinearLayout llDelete;
    private CheckBox cbAll;
    private Button btnDelete;
    private TextView tv_goshopp;
    private static final int ACTION_EDIT  =1;
    private static final int ACTION_COMPLETE  =2;
    private ShoppingCartAdapter shoppingCartAdapter;
    private View view;
    private List<Cart> mCartList = new ArrayList<Cart>();
    private List<Cart> mCarts= new ArrayList<Cart>();
    private int businessId = 0;

    private RelativeLayout toolbarContentRlyt;
    private Button toolbarLeftBtn;
    private TextView toolbarLeftTv;
    private TextView toolbarTitleTv;
    private Button toolbarRightBtn;
    private TextView toolbarRightTv;
    private int flag;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_shopp_cart);
        initView();
    }

    private void initView() {
        flag = getIntent().getIntExtra("flag", 0);

        toolbarContentRlyt = findViewById( R.id.toolbar_content_rlyt );
        toolbarLeftBtn = findViewById( R.id.toolbar_left_btn );
        toolbarLeftBtn.setVisibility(View.VISIBLE);
        toolbarLeftTv = (TextView)findViewById( R.id.toolbar_left_tv );
        toolbarTitleTv = findViewById( R.id.toolbar_title_tv );
        toolbarTitleTv.setVisibility(View.VISIBLE);
        toolbarTitleTv.setText("购物车");
        toolbarRightBtn = findViewById( R.id.toolbar_right_btn );
        tvEdit = findViewById( R.id.toolbar_right_tv );
        tvEdit.setVisibility(View.VISIBLE);
        tvEdit.setText("编辑");

        rvShoppCart = findViewById( R.id.rv_shoppCart );
        llCheckAll = findViewById( R.id.ll_check_all );
        checkboxAll = findViewById( R.id.checkbox_all );
        tvShopcartTotal = findViewById( R.id.tv_shopcart_total );
        btnCheckOut = findViewById( R.id.btn_check_out );
        llDelete = findViewById( R.id.ll_delete );
        cbAll = findViewById( R.id.cb_all );
        btnDelete = findViewById( R.id.btn_delete );
        ll_goShopping = findViewById( R.id.ll_goShopping );
        tv_goshopp = findViewById( R.id.tv_goshopp );

        btnCheckOut.setOnClickListener( this );
        btnDelete.setOnClickListener( this );
        tv_goshopp.setOnClickListener( this );

        if (flag == 0){
            btnCheckOut.setText("生成采购单");
        }else if (flag ==1){
            btnCheckOut.setText("生成出库单");
        }
        initListener();
    }

    private void initListener() {
        tvEdit.setTag(ACTION_EDIT);
        tvEdit.setText("编辑");
        tvEdit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int action = (int) v.getTag();
                if (action==ACTION_EDIT){
                    //切换完成状态
                    showDelete();
                } else {
                    //切换成编辑状态
                    hideDelete();
                }

            }
        });
        toolbarLeftBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
                setResult(0);
            }
        });
    }

    private void hideDelete() {
        //1.设置编辑
        tvEdit.setTag(ACTION_EDIT);
        //2.显示删除控件
        llDelete.setVisibility(View.GONE);
        //3.隐藏结算控件
        llCheckAll.setVisibility(View.VISIBLE);
        //4.设置文本为-完成
        tvEdit.setText("编辑");
        if (shoppingCartAdapter!=null){
            shoppingCartAdapter.checkAll_none(true);
            shoppingCartAdapter.checkAll();
            shoppingCartAdapter.showtotle();

        }

    }

    private void showDelete() {
        //1.设置完成
        tvEdit.setTag(ACTION_COMPLETE);
        //2.显示删除控件
        llDelete.setVisibility(View.VISIBLE);
        //3.隐藏结算控件
        llCheckAll.setVisibility(View.GONE);
        //4.设置文本为-完成
        tvEdit.setText("完成");
        //5.把所有的数据设置非选择状态
        if (shoppingCartAdapter!=null){
            shoppingCartAdapter.checkAll_none(false);
            shoppingCartAdapter.checkAll();
            shoppingCartAdapter.showtotle();
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        if (flag ==0){
            mCartList = GreendaoHelper.getCartList(businessId);
        }else if (flag ==1){
            List<TreasuryCartBean> treasuryList = GreendaoHelper.getTreasuryList(businessId);
            for (int i=0;i<treasuryList.size();i++){
                TreasuryCartBean treasuryCartBean = treasuryList.get(i);
                Cart cart = new Cart();
                cart.setName(treasuryCartBean.getName());
                cart.setProductId(treasuryCartBean.getProductId());
                cart.setSaleCount(treasuryCartBean.getSaleCount());
                cart.setPrice(treasuryCartBean.getPrice());
                cart.setProductType(treasuryCartBean.getProductType());
                cart.setBusinessId(treasuryCartBean.getBusinessId());
                cart.setIsSelected(treasuryCartBean.getIsSelected());
                cart.setImageUrl(treasuryCartBean.getImageUrl());
                mCartList.add(cart);
            }
        }

        if (mCartList!=null&&mCartList.size()>0){
            ll_goShopping.setVisibility(View.GONE);
            tvEdit.setVisibility(View.VISIBLE);
            llCheckAll.setVisibility(View.VISIBLE);
            rvShoppCart.setLayoutManager(new LinearLayoutManager(ShoppingCartActivity.this, LinearLayoutManager.VERTICAL,false));
            shoppingCartAdapter = new ShoppingCartAdapter(ShoppingCartActivity.this,mCartList,tvShopcartTotal,checkboxAll,cbAll,flag);
            rvShoppCart.setAdapter(shoppingCartAdapter);
            hideDelete();
        }else{
            empty_null();
        }
    }



    private void empty_null() {
        ll_goShopping.setVisibility(View.VISIBLE);
        llCheckAll.setVisibility(View.GONE);
        llDelete.setVisibility(View.GONE);
        tvEdit.setVisibility(View.GONE);
    }

    @Override
    public void onClick(View v) {
        if ( v == btnCheckOut ) {
            btnCheckOut.setEnabled(false);
            // Handle clicks for btnCheckOut
            for (int i=0;i <mCartList.size();i++){
                Cart cart = mCartList.get(i);
                boolean select = cart.getIsSelected();
                if (select){
                    mCarts.add(cart);
                }
            }
           if (mCartList.size()>0 && mCarts.size()==0){
               com.warehouse.utils.ToastUtil.showToast("请选择需要购买的商品");
               return;
           }else if (mCartList.size()==0){
               com.warehouse.utils.ToastUtil.showToast("请添加商品到购物车");
               return;
           }
           new OrderManager().commitCartData(mCarts,flag,new BaseNet.EntityCallback() {
               @Override
               public void connectCallback(BaseNet.EntityrResult entityrResult) {
                   if(entityrResult.entityType == BaseNet.EntityType.messagetrue){
                       shoppingCartAdapter.deleteData();
                       shoppingCartAdapter.checkAll();
                       ToastUtil.showToast("订单已生成");
                       if (shoppingCartAdapter.getItemCount()==0){
                           empty_null();
                       }
                   }else{
                       ToastUtil.showToast("生成订单失败");
                   }
                   btnCheckOut.setEnabled(true);
               }
           });

        } else if ( v == btnDelete ) {
            //Handle clicks for btnDelete
            shoppingCartAdapter.deleteData();
            shoppingCartAdapter.checkAll();
            if (shoppingCartAdapter.getItemCount()==0){
                empty_null();
            }
        }
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        setResult(0);
    }
}
